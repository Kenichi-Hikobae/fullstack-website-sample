//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IOwnerClient {

    getAllOwners(signal?: AbortSignal): Promise<OwnerDTO[]>;

    insertBulkOwners(owners: OwnerDTO[], signal?: AbortSignal): Promise<FileResponse>;
}

export class OwnerClient implements IOwnerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getAllOwners(signal?: AbortSignal): Promise<OwnerDTO[]> {
        let url_ = this.baseUrl + "/api/Owner/GetAllOwners";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllOwners(_response);
        });
    }

    protected processGetAllOwners(response: Response): Promise<OwnerDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as OwnerDTO[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OwnerDTO[]>(null as any);
    }

    insertBulkOwners(owners: OwnerDTO[], signal?: AbortSignal): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Owner/InsertBulkOwners";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(owners);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBulkOwners(_response);
        });
    }

    protected processInsertBulkOwners(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export interface IPropertyClient {

    getProperties(filters: PropertyFiltersDTO, signal?: AbortSignal): Promise<PropertiesLoadedCountDTO>;

    getPropertiesByOwner(ownerId: string, signal?: AbortSignal): Promise<PropertyDTO[]>;

    getProperty(propertyId: string, signal?: AbortSignal): Promise<PropertyDTO>;

    getTracesByProperty(propertyId: string, signal?: AbortSignal): Promise<PropertyTraceDTO[]>;

    insertBulkProperties(properties: PropertyDTO[], signal?: AbortSignal): Promise<FileResponse>;

    getTotalCount(signal?: AbortSignal): Promise<number>;
}

export class PropertyClient implements IPropertyClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getProperties(filters: PropertyFiltersDTO, signal?: AbortSignal): Promise<PropertiesLoadedCountDTO> {
        let url_ = this.baseUrl + "/api/Property/GetProperties";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filters);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProperties(_response);
        });
    }

    protected processGetProperties(response: Response): Promise<PropertiesLoadedCountDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PropertiesLoadedCountDTO;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PropertiesLoadedCountDTO>(null as any);
    }

    getPropertiesByOwner(ownerId: string, signal?: AbortSignal): Promise<PropertyDTO[]> {
        let url_ = this.baseUrl + "/api/Property/GetPropertiesByOwner/{ownerId}";
        if (ownerId === undefined || ownerId === null)
            throw new globalThis.Error("The parameter 'ownerId' must be defined.");
        url_ = url_.replace("{ownerId}", encodeURIComponent("" + ownerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPropertiesByOwner(_response);
        });
    }

    protected processGetPropertiesByOwner(response: Response): Promise<PropertyDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PropertyDTO[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PropertyDTO[]>(null as any);
    }

    getProperty(propertyId: string, signal?: AbortSignal): Promise<PropertyDTO> {
        let url_ = this.baseUrl + "/api/Property/GetProperty/{propertyId}";
        if (propertyId === undefined || propertyId === null)
            throw new globalThis.Error("The parameter 'propertyId' must be defined.");
        url_ = url_.replace("{propertyId}", encodeURIComponent("" + propertyId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProperty(_response);
        });
    }

    protected processGetProperty(response: Response): Promise<PropertyDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PropertyDTO;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PropertyDTO>(null as any);
    }

    getTracesByProperty(propertyId: string, signal?: AbortSignal): Promise<PropertyTraceDTO[]> {
        let url_ = this.baseUrl + "/api/Property/GetTracesByProperty/{propertyId}";
        if (propertyId === undefined || propertyId === null)
            throw new globalThis.Error("The parameter 'propertyId' must be defined.");
        url_ = url_.replace("{propertyId}", encodeURIComponent("" + propertyId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTracesByProperty(_response);
        });
    }

    protected processGetTracesByProperty(response: Response): Promise<PropertyTraceDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PropertyTraceDTO[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PropertyTraceDTO[]>(null as any);
    }

    insertBulkProperties(properties: PropertyDTO[], signal?: AbortSignal): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Property/InsertBulkProperties";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(properties);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertBulkProperties(_response);
        });
    }

    protected processInsertBulkProperties(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getTotalCount(signal?: AbortSignal): Promise<number> {
        let url_ = this.baseUrl + "/api/Property/GetTotalCount";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTotalCount(_response);
        });
    }

    protected processGetTotalCount(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }
}

export interface BaseModelDTO {
    id: string;
}

export interface OwnerDTO extends BaseModelDTO {
    name: string;
    email: string;
    address: string;
    photo: string | undefined;
    birthday: Date | undefined;
}

export interface PropertiesLoadedCountDTO {
    properties: PropertyDTO[];
    totalCount: number;
}

export interface PropertyDTO extends BaseModelDTO {
    name: string;
    address: string;
    price: number;
    codeInternal: number;
    year: number;
    propertyType: PropertyType;
    ownerId: string | undefined;
    propertyImages: PropertyImageDTO[] | undefined;
    propertyTraces: PropertyTraceDTO[] | undefined;
}

export enum PropertyType {
    Type1 = 0,
    Type2 = 1,
    Type3 = 2,
    Type4 = 3,
    Type5 = 4,
    Type6 = 5,
}

export interface PropertyImageDTO extends BaseModelDTO {
    file: string;
    enabled: boolean;
    propertyId: string;
}

export interface PropertyTraceDTO extends BaseModelDTO {
    dateSale: Date;
    name: string;
    value: number;
    tax: number;
    propertyId: string;
}

export interface PropertyFiltersDTO {
    name: string | undefined;
    address: string | undefined;
    minPrice: number | undefined;
    maxPrice: number | undefined;
    yearFilterType: PropertyYearFilterType | undefined;
    types: PropertyType[] | undefined;
    pagination: PaginationDTO;
}

export enum PropertyYearFilterType {
    MoreThan20 = 0,
    LessThan5 = 1,
    LessThan10 = 2,
    LessThan20 = 3,
}

export interface PaginationDTO {
    pageSize: number;
    pageNumber: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}